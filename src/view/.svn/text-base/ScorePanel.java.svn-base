/*
 * Long Nguyen
 * TCSS 305A - Tetris.
 * Spring 2014
 */


package view;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.Rectangle2D;
import java.io.File;
import java.io.IOException;
import java.util.Observable;
import java.util.Observer;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.JPanel;

import model.Board;

/**
 * Score panel.
 * 
 * @author lnguye81
 * @version 6.4.14
 */
@SuppressWarnings("serial")
public class ScorePanel extends JPanel implements Observer {

    /** Font size for score. */
    private static final int FONT_SIZE = 40;

    /** Size of the preview box. */
    private static final int PREVIEW_BOX_SIZE = 4;
    
    /** width. */
    private static final int WIDTH_GAP = 20;
    
    /** height. */
    private static final int HEIGHT_GAP = 10;
    
    /** two digit. */
    private static final int DOUBLE_DIGIT = 10;
    
    /**
     * Empty string.
     */
    private static final String EMPTY_S = "";
    
    /** Width of the preview box. */
    private final int myBoxWidth;

    /** Height of the preview box. */
    private final int myBoxHeight;

    /** Current score of the game. */
    private int myScore;

    /** Audio clip to be played when a line is completed. */
    private Clip myClip;

    /**
     * Constructor.
     *
     * @param theTileSize the size of the tiles of the preview box
     */
    public ScorePanel(final int theTileSize) {
        super();
        myBoxWidth = theTileSize * PREVIEW_BOX_SIZE;
        myBoxHeight = theTileSize * PREVIEW_BOX_SIZE;
        setUpAudio();
    }
    
    /**
     * Set the score.
     * 
     * @param theScore the score
     */
    public void setScore(final int theScore) {
        myScore = theScore;
    }
    
    /**
     * Setting up audio.
     */
    private void setUpAudio() {
        try {
            final AudioInputStream audioIn = AudioSystem.getAudioInputStream(new File("you"
                            + "_got_it_1.wav"));
            myClip = AudioSystem.getClip();
            myClip.open(audioIn);
        } catch (final IOException | LineUnavailableException 
                        | UnsupportedAudioFileException e) {
            e.printStackTrace();
        }

    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);

        final Graphics2D g2d = (Graphics2D) theGraphics;

        g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING
                             , RenderingHints.VALUE_TEXT_ANTIALIAS_ON);

        // set origin of the preview box
        final int pBoxX = (this.getWidth() - myBoxWidth) / 2;
        final int pBoxY = (this.getWidth() - myBoxHeight) / 2;
        g2d.translate(pBoxX, pBoxY);

        // draw a black background for the preview box
        final Rectangle2D bg = new Rectangle2D.Double(0, 0, myBoxWidth, myBoxHeight);
        g2d.setColor(Color.black);
        g2d.fill(bg);

        //Changing the color and the font size
        g2d.setColor(Color.YELLOW);
        g2d.setFont(new Font(Font.SANS_SERIF, Font.BOLD, FONT_SIZE));

        //Drawing the string to the panel
        if (myScore < DOUBLE_DIGIT) {
            g2d.drawString("0" + myScore, myBoxWidth / 2 - WIDTH_GAP
                           , myBoxHeight / 2 + HEIGHT_GAP);
        } else {
            g2d.drawString(EMPTY_S + myScore, myBoxWidth / 2 - WIDTH_GAP
                           , myBoxHeight / 2 + HEIGHT_GAP);
        }

    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void update(final Observable theObj, final Object theArg) {
        if (theObj instanceof Board && theArg instanceof Board.CompletedLines) {

            final int lines = ((Board.CompletedLines) theArg).getCompletedLines();
            myScore += lines;
            myClip.loop(1);
            repaint();
        }
    }
    
    /**
     * Get score.
     * 
     * @return the score.
     */
    public int getScore() {
        return myScore;
    }

}
